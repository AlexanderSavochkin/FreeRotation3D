#version 330 core

// Interpolated values from the vertex shaders
in vec3 fragment_color;
in vec3 fragment_normal;
in vec3 fragment_position;
in vec2 fragment_texturecoords;

uniform vec3 light_color;
uniform vec3 light_dir;
uniform vec3 view_position;

uniform sampler2D texture1;

// Ouput data
out vec3 color;

void main(){
	vec3 surface_color = fragment_color + texture(texture1, fragment_texturecoords).xyz;

	// Ambient
	float ambient_strength = 0.1f;
	vec3 ambient = ambient_strength * light_color;

	// Diffuse 
	vec3 norm = normalize(fragment_normal);
	vec3 light_dir_norm = -normalize(light_dir);
	float diff = max(dot(norm, light_dir_norm), 0.0);
	vec3 diffuse = diff * light_color;


	float specular_strength = 0.5f;
	vec3 viewDir = normalize(view_position - fragment_position);
	vec3 reflectDir = reflect(-light_dir_norm, norm);  
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
	vec3 specular = specular_strength * spec * light_color;  


	// Output color = color specified in the vertex shader, 
	// interpolated between all 3 surrounding vertices
	color = (ambient + diffuse + specular) * surface_color;
}